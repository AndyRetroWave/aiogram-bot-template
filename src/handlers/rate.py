import logging
from aiogram import F, types, Router, Bot
from aiogram.types import Message, CallbackQuery
from src.lexicon.lexicon_ru import LEXICON_RU
from src.keyboards.keyboards import calculator_rate, update_calculator, meny
from src.api.response_rate import value, formatted_num
from aiogram.fsm.state import default_state, State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.types import URLInputFile
from config.config import settings


bot = Bot(token=settings.BOT_TOKEN)

router = Router()
logger = logging.getLogger(__name__)


# –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—Ä–æ—Å–æ–≤–æ–∫
class FSMSneakers(StatesGroup):
    rate_sneakers = State()


# –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–¥–µ–∂–¥—ã
class FSMClothes(StatesGroup):
    rate_clothes = State()


# –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Ö–æ–¥
class FSMCare(StatesGroup):
    rate_—Åare = State()


# –ö–Ω–æ–ø–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
@router.callback_query(F.data == 'big_button_1_pressed')
async def process_button_1_press(callback: CallbackQuery):
    logger.debug('–í–æ—à–ª–∏ –≤ –∫–Ω–æ–ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è')
    await callback.message.edit_text(
        text=LEXICON_RU["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"],
        reply_markup=calculator_rate,
        parse_mode='MarkdownV2'
    )
    await callback.answer(show_alert=True)
    logger.debug('–í—ã—à–ª–∏ –∏–∑ –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è')


# –ö–Ω–æ–ø–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞
@router.callback_query(F.data == 'big_button_1_pressed')
async def process_button_1_press(callback: CallbackQuery):
    logger.debug('–í–æ—à–ª–∏ –≤ –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–∞')
    await callback.message.edit_text(
        text=LEXICON_RU["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"],
        reply_markup=calculator_rate,
        parse_mode='MarkdownV2'
    )
    await callback.answer(show_alert=True)
    logger.debug('–í—ã—à–ª–∏ –∏–∑ –∫–Ω–æ–ø–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞')


# –ö–Ω–æ–ø–∫–∞ –∫—Ä–æ—Å–æ–≤–∫–∞
@router.callback_query(F.data == 'button_snecers', StateFilter(default_state))
async def process_button_1_press(callback: CallbackQuery, state: FSMContext):
    logger.debug('–í–æ—à–ª–∏ –≤ –∫–Ω–æ–ø–∫—É –∫—Ä–æ—Å–æ–≤–∫–∏')
    photo_url_1 = 'https://bytepix.ru/ib/OghwDLiWhu.jpg'
    photo_1 = URLInputFile(photo_url_1)
    await bot.send_photo(
        chat_id=callback.message.chat.id,
        caption=LEXICON_RU["–í–≤–µ—Å—Ç–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å"],
        photo=photo_1,
        parse_mode='MarkdownV2'
    )
    photo_url_2 = 'https://bytepix.ru/ib/AHeko931wt.jpg'
    photo_2 = URLInputFile(photo_url_2)
    await bot.send_photo(
        chat_id=callback.message.chat.id,
        caption=LEXICON_RU["–í—ã–∫—É–ø"],
        photo=photo_2,
        parse_mode='MarkdownV2',
        allow_sending_without_reply=True
    )
    await callback.answer(show_alert=True)
    await state.set_state(FSMSneakers.rate_sneakers)
    logger.debug('–í—ã—à–ª–∏ –∏–∑ –∫–Ω–æ–ø–∫–∏ –∫—Ä–æ—Å–æ–≤–∫–∏')


# –•–µ–Ω–¥–ª–µ—Ä –ø–æ —Ü–µ–Ω–µ –∫—Ä–æ—Å–æ–≤–æ–∫
@router.message(StateFilter(FSMSneakers.rate_sneakers))
async def calculator_rate_value(message: Message, state: FSMContext):
    logger.debug('–í–æ—à–ª–∏ –≤ —Ü–µ–Ω–æ–≤–æ–π-—Ö—ç–Ω–¥–ª–µ—Ä –∫—Ä–æ—Å–æ–≤–æ–∫')
    try:
        text = float(message.text)
        if value is not None:
            value_markup = text * (value + value * 0.1) + 1200
            round_value = round(value_markup)
            await message.answer(text=str(
                f"""–ò—Ç–æ–≥–æ *{round_value}* —Ä—É–±\. —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–æ –ü–µ–Ω–∑—ã‚ù§Ô∏è\n\n–î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\:\n–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ—Å—Ç–∞–≤–∏–ª–∞\: *1200 —Ä—É–±–ª–µ–π\! \(—É–∂–µ —É—á—Ç–µ–Ω–æ –≤ —Ü–µ–Ω–µ\)*\n–ö—É—Ä—Å —é–∞–Ω—è *{formatted_num}*\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è\: –ö—Ä–æ—Å–æ–≤–∫–∏üëü"""),
                parse_mode='MarkdownV2',
                reply_markup=update_calculator
            )
            await state.clear()
        else:
            await message.reply(text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–µ")
    except ValueError:
        await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ *–Æ–∞–Ω—è—Ö*\.", parse_mode='MarkdownV2')
    logger.debug('–í—ã—à–ª–∏ –∏–∑ —Ü–µ–Ω–æ–≤–æ–≥–æ-—Ö—ç–Ω–¥–ª–µ—Ä–∞ –∫—Ä–æ—Å–æ–≤–æ–∫')


# –ö–Ω–æ–ø–∫–∞ –û–¥–µ–∂–¥—ã
@router.callback_query(F.data == 'button_clothes', StateFilter(default_state))
async def process_button_1_press(callback: CallbackQuery, state: FSMContext):
    logger.debug('–í–æ—à–ª–∏ –≤ –∫–Ω–æ–ø–∫—É –∫—Ä–æ—Å–æ–≤–∫–∏')
    photo_url_1 = 'https://bytepix.ru/ib/OghwDLiWhu.jpg'
    photo_1 = URLInputFile(photo_url_1)
    await bot.send_photo(
        chat_id=callback.message.chat.id,
        caption=LEXICON_RU["–í–≤–µ—Å—Ç–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å"],
        photo=photo_1,
        parse_mode='MarkdownV2'
    )
    photo_url_2 = 'https://bytepix.ru/ib/AHeko931wt.jpg'
    photo_2 = URLInputFile(photo_url_2)
    await bot.send_photo(
        chat_id=callback.message.chat.id,
        caption=LEXICON_RU["–í—ã–∫—É–ø"],
        photo=photo_2,
        parse_mode='MarkdownV2',
        allow_sending_without_reply=True
    )
    await callback.answer(show_alert=True)
    await state.set_state(FSMClothes.rate_clothes)
    logger.debug('–í—ã—à–ª–∏ –∏–∑ –∫–Ω–æ–ø–∫–∏ –∫—Ä–æ—Å–æ–≤–∫–∏')


# –•–µ–Ω–¥–ª–µ—Ä –ø–æ —Ü–µ–Ω–µ –æ–¥–µ–∂–¥—ã
@router.message(StateFilter(FSMClothes.rate_clothes))
async def calculator_rate_value(message: Message, state: FSMContext):
    logger.debug('–í–æ—à–ª–∏ –≤ —Ü–µ–Ω–æ–≤–æ–π-—Ö—ç–Ω–¥–ª–µ—Ä –æ–¥–µ–∂–¥—ã')
    try:
        text = float(message.text)
        if value is not None:
            value_markup = text * (value + value * 0.1) + 1000
            round_value = round(value_markup)
            await message.answer(text=str(
                f"""–ò—Ç–æ–≥–æ *{round_value}* —Ä—É–±\. —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–æ –ü–µ–Ω–∑—ã‚ù§Ô∏è\n\n–î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\:\n–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ—Å—Ç–∞–≤–∏–ª–∞\: *1000 —Ä—É–±–ª–µ–π\! \(—É–∂–µ —É—á—Ç–µ–Ω–æ –≤ —Ü–µ–Ω–µ\)*\n–ö—É—Ä—Å —é–∞–Ω—è *{formatted_num}*\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è\: –û–¥–µ–∂–¥–∞ü©≥"""),
                parse_mode='MarkdownV2',
                reply_markup=update_calculator,
            )
            await state.clear()
        else:
            await message.reply(text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–µ")
    except ValueError:
        await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ *–Æ–∞–Ω—è—Ö*\.", parse_mode='MarkdownV2')
    logger.debug('–í—ã—à–ª–∏ –∏–∑ —Ü–µ–Ω–æ–≤–æ–≥–æ-—Ö—ç–Ω–¥–ª–µ—Ä–∞ –æ–¥–µ–∂–¥—ã')


# –ö–Ω–æ–ø–∫–∞ –£—Ö–æ–¥
@router.callback_query(F.data == 'button_care', StateFilter(default_state))
async def process_button_1_press(callback: CallbackQuery, state: FSMContext):
    logger.debug('–í–æ—à–ª–∏ –≤ –∫–Ω–æ–ø–∫—É —É—Ö–æ–¥')
    photo_url_1 = 'https://bytepix.ru/ib/OghwDLiWhu.jpg'
    photo_1 = URLInputFile(photo_url_1)
    await bot.send_photo(
        chat_id=callback.message.chat.id,
        caption=LEXICON_RU["–í–≤–µ—Å—Ç–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å"],
        photo=photo_1,
        parse_mode='MarkdownV2'
    )
    photo_url_2 = 'https://bytepix.ru/ib/AHeko931wt.jpg'
    photo_2 = URLInputFile(photo_url_2)
    await bot.send_photo(
        chat_id=callback.message.chat.id,
        caption=LEXICON_RU["–í—ã–∫—É–ø"],
        photo=photo_2,
        parse_mode='MarkdownV2',
        allow_sending_without_reply=True
    )
    await callback.answer(show_alert=True)
    await state.set_state(FSMCare.rate_—Åare)
    logger.debug('–í—ã—à–ª–∏ –∏–∑ –∫–Ω–æ–ø–∫–∏ —É—Ö–æ–¥')


# –•–µ–Ω–¥–ª–µ—Ä –ø–æ —Ü–µ–Ω–µ —É—Ö–æ–¥
@router.message(StateFilter(FSMCare.rate_—Åare))
async def calculator_rate_value(message: Message, state: FSMContext):
    logger.debug('–í–æ—à–ª–∏ –≤ —Ü–µ–Ω–æ–≤–æ–π-—Ö—ç–Ω–¥–ª–µ—Ä —É—Ö–æ–¥')
    try:
        text = float(message.text)
        if value is not None:
            value_markup = text * (value + value * 0.1) + 700
            round_value = round(value_markup)
            await message.answer(text=str(
                f"""–ò—Ç–æ–≥–æ *{round_value}* —Ä—É–±\. —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–æ –ü–µ–Ω–∑—ã‚ù§Ô∏è\n\n–î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\:\n–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ—Å—Ç–∞–≤–∏–ª–∞\: *700 —Ä—É–±–ª–µ–π\! \(—É–∂–µ —É—á—Ç–µ–Ω–æ –≤ —Ü–µ–Ω–µ\)*\n–ö—É—Ä—Å —é–∞–Ω—è *{formatted_num}*\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è\: –û–¥–µ–∂–¥–∞ü©≥"""),
                parse_mode='MarkdownV2',
                reply_markup=update_calculator,)
            await state.clear()
        else:
            await message.reply(text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–µ")
    except ValueError:
        await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ *–Æ–∞–Ω—è—Ö*\.", parse_mode='MarkdownV2')
    logger.debug('–í—ã—à–ª–∏ –∏–∑ —Ü–µ–Ω–æ–≤–æ–≥–æ-—Ö—ç–Ω–¥–ª–µ—Ä–∞ —É—Ö–æ–¥')

import logging
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from app.lexicon.lexicon_ru import LEXICON_RU
from app.keyboards.keyboards import calculator_rate, update_calculator, meny
from app.api.response_rate import formatted_num
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from app.models.course.dao import course_today
from app.states.states import FSMCare, FSMClothes, FSMSneakers, FSMDownJacket
from app.static.images import photo_rate_1, photo_rate_2
from aiogram.fsm.state import default_state
from config.config import bot, logger

router = Router()


# –ö–Ω–æ–ø–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
@router.callback_query(F.data == 'big_button_1_pressed')
async def category_botton(callback: CallbackQuery):
    try:
        user = callback.from_user.username
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ü–µ–Ω—ã")
        await callback.message.edit_text(
            text=LEXICON_RU["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"],
            reply_markup=calculator_rate,
            parse_mode='MarkdownV2'
        )
        await callback.answer(show_alert=True)
    except:
        logger.critical("–û—à–∏–±–∫–∞ –≤ –∫–Ω–æ–ø–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")


# –ö–Ω–æ–ø–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞
@router.callback_query(F.data == 'big_button_1_pressed')
async def repetition_buttons(callback: CallbackQuery):
    try:
        user = callback.from_user.username
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–∞")
        await callback.message.edit_text(
            text=LEXICON_RU["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"],
            reply_markup=calculator_rate,
            parse_mode='MarkdownV2'
        )
        await callback.answer(show_alert=True)
    except:
        logger.critical("–û—à–∏–±–∫–∞ –≤ –∫–Ω–æ–ø–∫–µ –ø–æ–≤—Ç–æ—Ä–∞")

# –ö–Ω–æ–ø–∫–∞ –∫—Ä–æ—Å–æ–≤–∫–∞


@router.callback_query(F.data == 'button_snecers', StateFilter(default_state))
async def sneaks_button(callback: CallbackQuery, state: FSMContext):
    try:
        user = callback.from_user.username
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –∫—Ä–æ—Å–æ–≤–æ–∫")
        await bot.send_photo(
            chat_id=callback.message.chat.id,
            caption=LEXICON_RU["–í–≤–µ—Å—Ç–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å"],
            photo=photo_rate_1,
            parse_mode='MarkdownV2'
        )
        await bot.send_photo(
            chat_id=callback.message.chat.id,
            caption=LEXICON_RU["–í—ã–∫—É–ø"],
            photo=photo_rate_2,
            parse_mode='MarkdownV2',
            allow_sending_without_reply=True
        )
        await callback.answer(show_alert=True)
        await state.set_state(FSMSneakers.rate_sneakers)
    except:
        logger.critical("–û—à–∏–±–∫–∞ –≤ –∫–Ω–æ–ø–∫–µ –∫—Ä–æ—Å–æ–≤–∫–∞")


# –•–µ–Ω–¥–ª–µ—Ä –ø–æ —Ü–µ–Ω–µ –∫—Ä–æ—Å–æ–≤–æ–∫
@router.message(StateFilter(FSMSneakers.rate_sneakers))
async def calculator_rate_value(message: Message, state: FSMContext):
    try:
        user = message.from_user.username
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –ø–æ—Å—á–∏—Ç–∞–ª —Ü–µ–Ω—É –∫—Ä–æ—Å–æ–≤–æ–∫")
        try:
            text = float(message.text)
            value = await course_today()
            if value is not None:
                value_markup = text * value + 1200
                round_value = round(value_markup)
                formatted_num = "{}\\.{}".format(
                    int(value), int(value * 100) % 100)
                await message.answer(text=str(
                    f"""–ò—Ç–æ–≥–æ *{round_value}* —Ä—É–±\. —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–æ –ü–µ–Ω–∑—ã‚ù§Ô∏è\n\n–î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\:\n–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ—Å—Ç–∞–≤–∏–ª–∞\: *1200 —Ä—É–±–ª–µ–π\! \(—É–∂–µ —É—á—Ç–µ–Ω–æ –≤ —Ü–µ–Ω–µ\)*\n–ö—É—Ä—Å —é–∞–Ω—è *{formatted_num}*\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è\: –ö—Ä–æ—Å–æ–≤–∫–∏üëü"""),
                    parse_mode='MarkdownV2',
                    reply_markup=update_calculator
                )
                await state.clear()
            else:
                await message.reply(text=LEXICON_RU["–î–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–µ"])
        except ValueError:
            await message.answer(text=LEXICON_RU["–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Ö"],
                                parse_mode='MarkdownV2')
    except:
        logger.critical("–û—à–∏–±–∫–∞ –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ –∫—Ä–æ—Å–æ–≤–æ–∫")


# –ö–Ω–æ–ø–∫–∞ –ø—É—Ö–æ–≤–∏–∫–∏
@router.callback_query(F.data == 'button_down_jacket', StateFilter(default_state))
async def button_down_jacket(callback: CallbackQuery, state: FSMContext):
    try:
        user = callback.from_user.username
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—É—Ö–æ–≤–∏–∫–æ–≤")
        await bot.send_photo(
            chat_id=callback.message.chat.id,
            caption=LEXICON_RU["–í–≤–µ—Å—Ç–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å"],
            photo=photo_rate_1,
            parse_mode='MarkdownV2'
        )
        await bot.send_photo(
            chat_id=callback.message.chat.id,
            caption=LEXICON_RU["–í—ã–∫—É–ø"],
            photo=photo_rate_2,
            parse_mode='MarkdownV2',
            allow_sending_without_reply=True
        )
        await callback.answer(show_alert=True)
        await state.set_state(FSMDownJacket.rate_down_jacket)
    except:
        logger.critical("–û—à–∏–±–∫–∞ –≤ –∫–Ω–æ–ø–∫–µ –ø—É—Ö–æ–≤–∏–∫–æ–≤ ")


# –•–µ–Ω–¥–ª–µ—Ä –ø–æ —Ü–µ–Ω–µ –ø—É—Ö–æ–≤–∏–∫–∏
@router.message(StateFilter(FSMDownJacket.rate_down_jacket))
async def calculator_down_jacket(message: Message, state: FSMContext):
    try:
        user = message.from_user.username
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –ø–æ—Å—á–∏—Ç–∞–ª —Ü–µ–Ω—É –ø—É—Ö–æ–≤–∏–∫–æ–≤")
        try:
            text = float(message.text)
            value = await course_today()
            if value is not None:
                value_markup = text * value + 1200
                round_value = round(value_markup)
                formatted_num = "{}\\.{}".format(
                    int(value), int(value * 100) % 100)
                await message.answer(text=str(
                    f"""–ò—Ç–æ–≥–æ *{round_value}* —Ä—É–±\. —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–æ –ü–µ–Ω–∑—ã‚ù§Ô∏è\n\n–î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\:\n–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ—Å—Ç–∞–≤–∏–ª–∞\: *1200 —Ä—É–±–ª–µ–π\! \(—É–∂–µ —É—á—Ç–µ–Ω–æ –≤ —Ü–µ–Ω–µ\)*\n–ö—É—Ä—Å —é–∞–Ω—è *{formatted_num}*\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è\: –ü—É—Ö–æ–≤–∏–∫–∏ü•º"""),
                    parse_mode='MarkdownV2',
                    reply_markup=update_calculator
                )
                await state.clear()
            else:
                await message.reply(text=LEXICON_RU["–î–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–µ"])
        except ValueError:
            await message.answer(text=LEXICON_RU["–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Ö"],
                                parse_mode='MarkdownV2')
    except:
        logger.critical("–û—à–∏–±–∫–∞ –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ –ø—É—Ö–æ–≤–∏–∫–æ–≤ ")


# –ö–Ω–æ–ø–∫–∞ –û–¥–µ–∂–¥—ã
@router.callback_query(F.data == 'button_clothes', StateFilter(default_state))
async def button_clothes(callback: CallbackQuery, state: FSMContext):
    try:
        user = callback.from_user.username
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–¥–µ–∂–¥—ã")
        await bot.send_photo(
            chat_id=callback.message.chat.id,
            caption=LEXICON_RU["–í–≤–µ—Å—Ç–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å"],
            photo=photo_rate_1,
            parse_mode='MarkdownV2'
        )
        await bot.send_photo(
            chat_id=callback.message.chat.id,
            caption=LEXICON_RU["–í—ã–∫—É–ø"],
            photo=photo_rate_2,
            parse_mode='MarkdownV2',
            allow_sending_without_reply=True
        )
        await callback.answer(show_alert=True)
        await state.set_state(FSMClothes.rate_clothes)
    except:
        logger.critical("–û—à–∏–±–∫–∞ –≤ –∫–Ω–æ–ø–∫–µ –æ–¥–µ–∂–¥—ã")


# –•–µ–Ω–¥–ª–µ—Ä –ø–æ —Ü–µ–Ω–µ –æ–¥–µ–∂–¥—ã
@router.message(StateFilter(FSMClothes.rate_clothes))
async def calculator_clothes(message: Message, state: FSMContext):
    try:
        user = message.from_user.username
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –ø–æ—Å—á–∏—Ç–∞–ª —Ü–µ–Ω—É –æ–¥–µ–∂–¥—ã")
        try:
            text = float(message.text)
            value = await course_today()
            if value is not None:
                value_markup = text * value + 1000
                round_value = round(value_markup)
                formatted_num = "{}\\.{}".format(
                    int(value), int(value * 100) % 100)
                await message.answer(text=str(
                    f"""–ò—Ç–æ–≥–æ *{round_value}* —Ä—É–±\. —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–æ –ü–µ–Ω–∑—ã‚ù§Ô∏è\n\n–î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\:\n–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ—Å—Ç–∞–≤–∏–ª–∞\: *1000 —Ä—É–±–ª–µ–π\! \(—É–∂–µ —É—á—Ç–µ–Ω–æ –≤ —Ü–µ–Ω–µ\)*\n–ö—É—Ä—Å —é–∞–Ω—è *{formatted_num}*\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è\: –û–¥–µ–∂–¥–∞ü©≥"""),
                    parse_mode='MarkdownV2',
                    reply_markup=update_calculator,
                )
                await state.clear()
            else:
                await message.reply(text=LEXICON_RU["–î–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–µ"])
        except ValueError:
            await message.answer(text=LEXICON_RU["–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Ö"],
                                parse_mode='MarkdownV2')
    except:
        logger.critical("–û—à–∏–±–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ –æ–¥–µ–∂–¥—ã")


# –ö–Ω–æ–ø–∫–∞ –£–∫—Ä–∞—à–µ–Ω–∏—è/–¥—É—Ö–∏/–∫–æ–≤—Ä—ã
@router.callback_query(F.data == 'button_care', StateFilter(default_state))
async def button_care(callback: CallbackQuery, state: FSMContext):
    try:
        user = callback.from_user.username
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É —É–∫—Ä–∞—à–µ–Ω–∏–π")
        await bot.send_photo(
            chat_id=callback.message.chat.id,
            caption=LEXICON_RU["–í–≤–µ—Å—Ç–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å"],
            photo=photo_rate_1,
            parse_mode='MarkdownV2'
        )
        await bot.send_photo(
            chat_id=callback.message.chat.id,
            caption=LEXICON_RU["–í—ã–∫—É–ø"],
            photo=photo_rate_2,
            parse_mode='MarkdownV2',
            allow_sending_without_reply=True
        )
        await callback.answer(show_alert=True)
        await state.set_state(FSMCare.rate_—Åare)
    except:
        logger.critical("–û—à–∏–±–∫–∞ –∫–Ω–æ–ø–∫–µ —É–∫—Ä–∞—à–µ–Ω–∏–π")


# –•–µ–Ω–¥–ª–µ—Ä –ø–æ —Ü–µ–Ω–µ –£–∫—Ä–∞—à–µ–Ω–∏—è/–¥—É—Ö–∏/–∫–æ–≤—Ä—ã
@router.message(StateFilter(FSMCare.rate_—Åare))
async def calculator_rate_care(message: Message, state: FSMContext):
    try:
        user = message.from_user.username
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –ø–æ—Å—á–∏—Ç–∞–ª —Ü–µ–Ω—É —É–∫—Ä–∞—à–µ–Ω–∏–π")
        try:
            text = float(message.text)
            value = await course_today()
            print(value)
            if value is not None:
                value_markup = text * value + 1000
                round_value = round(value_markup)
                formatted_num = "{}\\.{}".format(
                    int(value), int(value * 100) % 100)
                await message.answer(text=str(
                    f"""–ò—Ç–æ–≥–æ *{round_value}* —Ä—É–±\. —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–æ –ü–µ–Ω–∑—ã‚ù§Ô∏è\n\n–î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\:\n–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ—Å—Ç–∞–≤–∏–ª–∞\: *1000 —Ä—É–±–ª–µ–π\! \(—É–∂–µ —É—á—Ç–µ–Ω–æ –≤ —Ü–µ–Ω–µ\)*\n–ö—É—Ä—Å —é–∞–Ω—è *{formatted_num}*\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è\: –£–∫—Ä–∞—à–µ–Ω–∏—è/–¥—É—Ö–∏/–∫–æ–≤—Ä—ãüíç"""),
                    parse_mode='MarkdownV2',
                    reply_markup=update_calculator,)
                await state.clear()
            else:
                await message.reply(text=LEXICON_RU["–î–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–µ"])
        except ValueError:
            await message.answer(text=LEXICON_RU["–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Ö"],
                            parse_mode='MarkdownV2')
    except:
        logger.critical("–û—à–∏–±–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ —É–∫—Ä–∞—à–µ–Ω–∏–π")


# –ö–Ω–æ–ø–∫–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã
@router.callback_query(F.data == 'button_jewelry')
async def button_jewelry(callback: CallbackQuery, state: FSMContext):
    try:
        user = callback.from_user.username
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –∑–µ—à–µ–ª –≤ –∫–Ω–æ–ø–∫—É —É–∫—Ä–∞—à–µ–Ω–∏–π")
        await callback.message.edit_text(
            text=LEXICON_RU["–ó–∞–∫–∞–∑ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤"],
            parse_mode='MarkdownV2',
            reply_markup=update_calculator,)
        await callback.answer(show_alert=True)
    except:
        logger.critical("–û—à–∏–±–∫–∞ –∫–Ω–æ–ø–∫–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã")
